// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace HalSwaggerSample.WebApp.Proxies
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class ProductOperationsExtensions
    {
            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ProductCollection GetProducts(this IProductOperations operations)
            {
                return Task.Factory.StartNew(s => ((IProductOperations)s).GetProductsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductCollection> GetProductsAsync( this IProductOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<ProductCollection> result = await operations.GetProductsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product Id.
            /// </param>
            public static Product GetProduct(this IProductOperations operations, int? productId)
            {
                return Task.Factory.StartNew(s => ((IProductOperations)s).GetProductAsync(productId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productId'>
            /// The product Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Product> GetProductAsync( this IProductOperations operations, int? productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<Product> result = await operations.GetProductWithHttpMessagesAsync(productId, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
